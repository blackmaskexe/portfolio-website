"use client";
import React, { useEffect, useRef, useState } from "react";
import { MotionValue, motion, useScroll, useTransform } from "framer-motion";
import { cn } from "@/lib/utils";
// All the Icon imports remain the same as the original file
import {
    IconBrightnessDown,
    IconBrightnessUp,
    IconCaretRightFilled,
    IconCaretUpFilled,
    IconChevronUp,
    IconMicrophone,
    IconMoon,
    IconPlayerSkipForward,
    IconPlayerTrackNext,
    IconPlayerTrackPrev,
    IconTable,
    IconVolume,
    IconVolume2,
    IconVolume3,
    IconSearch,
    IconWorld,
    IconCommand,
    IconCaretLeftFilled,
    IconCaretDownFilled,
} from "@tabler/icons-react";


export const MacbookScroll = ({
  children, // Key Change: Replaced 'src' with 'children'
  title,
  badge,
  showGradient = true, // Default to true for a smoother stop
}: {
  children?: React.ReactNode; // Key Change: Accept any React node
  title?: string | React.ReactNode;
  badge?: React.ReactNode;
  showGradient?: boolean;
}) => {
  const ref = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    target: ref,
    offset: ["start start", "end start"],
  });

  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    if (window && window.innerWidth < 768) {
      setIsMobile(true);
    }
  }, []);

  // Define the point where animations should stop
  const animationStopPoint = 0.3;

  // Animate from initial state to final state between 0 and animationStopPoint
  const scaleX = useTransform(
    scrollYProgress,
    [0, animationStopPoint],
    [1.2, isMobile ? 1.0 : 1.5], // Scale up to a larger size
  );
  const scaleY = useTransform(
    scrollYProgress,
    [0, animationStopPoint],
    [0.6, isMobile ? 1.0 : 1.5],
  );
  const rotate = useTransform(
    scrollYProgress,
    [0, animationStopPoint],
    [-28, 0] // Rotate from -28 degrees to 0
  );
  const translate = useTransform(
    scrollYProgress,
    [0, animationStopPoint],
    [0, -100] // Move slightly up to settle
  );

  // Fade out the title text as the animation progresses
  const textTransform = useTransform(
    scrollYProgress,
    [0, animationStopPoint],
    [0, 100]
  );
  const textOpacity = useTransform(
    scrollYProgress,
    [0, animationStopPoint / 2],
    [1, 0]
  );

  // Key Change: Fade in the interactive content as the screen locks
  const contentOpacity = useTransform(
    scrollYProgress,
    [animationStopPoint - 0.05, animationStopPoint],
    [0, 1]
  );
  const contentPointerEvents = useTransform(
    scrollYProgress,
    [animationStopPoint - 0.05, animationStopPoint],
    ["none", "auto"]
  );

  return (
    // Key Change: Set a fixed height to define the scroll area for sticky positioning
    <div ref={ref} className="relative h-[300vh] py-0">
      <div className="sticky top-0 flex min-h-screen shrink-0 transform flex-col items-center justify-start [perspective:800px]">
        <motion.h2
          style={{
            translateY: textTransform,
            opacity: textOpacity,
          }}
          className="mb-20 text-center text-3xl font-bold text-neutral-800 dark:text-white"
        >
          {title || (
            <span>
              This Macbook is built with Tailwindcss. <br /> No kidding.
            </span>
          )}
        </motion.h2>

        {/* Lid with interactive content */}
        <Lid
          scaleX={scaleX}
          scaleY={scaleY}
          rotate={rotate}
          translate={translate}
          contentOpacity={contentOpacity} // Pass opacity to the lid
          contentPointerEvents={contentPointerEvents} // Pass pointer events
        >
          {children} {/* Key Change: Pass children to the Lid */}
        </Lid>

        {/* Base area */}
        <div className="relative -z-10 h-[22rem] w-[32rem] overflow-hidden rounded-2xl bg-gray-200 dark:bg-[#272729]">
          <div className="relative h-10 w-full">
            <div className="absolute inset-x-0 mx-auto h-4 w-[80%] bg-[#050505]" />
          </div>
          <div className="relative flex">
            <div className="mx-auto h-full w-[10%] overflow-hidden">
              <SpeakerGrid />
            </div>
            <div className="mx-auto h-full w-[80%]">
              <Keypad />
            </div>
            <div className="mx-auto h-full w-[10%] overflow-hidden">
              <SpeakerGrid />
            </div>
          </div>
          <Trackpad />
          <div className="absolute inset-x-0 bottom-0 mx-auto h-2 w-20 rounded-tl-3xl rounded-tr-3xl bg-gradient-to-t from-[#272729] to-[#050505]" />
          {showGradient && (
            <div className="absolute inset-x-0 bottom-0 z-50 h-40 w-full bg-gradient-to-t from-white via-white to-transparent dark:from-black dark:via-black"></div>
          )}
          {badge && <div className="absolute bottom-4 left-4">{badge}</div>}
        </div>
      </div>
    </div>
  );
};

// Key Change: Modified Lid to accept children and control their visibility
export const Lid = ({
  scaleX,
  scaleY,
  rotate,
  translate,
  children,
  contentOpacity,
  contentPointerEvents,
}: {
  scaleX: MotionValue<number>;
  scaleY: MotionValue<number>;
  rotate: MotionValue<number>;
  translate: MotionValue<number>;
  children: React.ReactNode;
  contentOpacity: MotionValue<number>;
  contentPointerEvents: MotionValue<string>;
}) => {
  return (
    <div className="relative [perspective:800px]">
      {/* This is the back of the laptop lid */}
      <div
        style={{
          transform: "perspective(800px) rotateX(-25deg) translateZ(0px)",
          transformOrigin: "bottom",
          transformStyle: "preserve-3d",
        }}
        className="relative h-[12rem] w-[32rem] rounded-2xl bg-[#010101] p-2"
      >
        <div
          style={{
            boxShadow: "0px 2px 0px 2px #171717 inset",
          }}
          className="absolute inset-0 flex items-center justify-center rounded-lg bg-[#010101]"
        >
          <span className="text-white">
            <AceternityLogo />
          </span>
        </div>
      </div>
      {/* This is the screen that animates and holds the content */}
      <motion.div
        style={{
          scaleX: scaleX,
          scaleY: scaleY,
          rotateX: rotate,
          translateY: translate,
          transformStyle: "preserve-3d",
          transformOrigin: "top",
          opacity: contentOpacity,
          pointerEvents: contentPointerEvents,
        }}
        className="absolute inset-0 h-96 w-[32rem] rounded-2xl bg-[#010101] p-2"
      >
        <div className="absolute inset-0 rounded-lg bg-gray-900" />
        {/* Render the interactive content inside the screen */}
        <div className="absolute inset-0 h-full w-full rounded-lg object-cover object-left-top">
            {children}
        </div>
      </motion.div>
    </div>
  );
};

// All other sub-components (Trackpad, Keypad, KBtn, etc.) remain exactly the same.
// Just copy them from the original file.
export const Trackpad = () => { /* ... */ };
export const Keypad = () => { /* ... */ };
export const KBtn = ({ /* ... */ }) => { /* ... */ };
export const SpeakerGrid = () => { /* ... */ };
export const OptionKey = ({ /* ... */ }) => { /* ... */ };
const AceternityLogo = () => { /* ... */ };
